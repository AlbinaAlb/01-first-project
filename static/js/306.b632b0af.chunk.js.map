{"version":3,"file":"static/js/306.b632b0af.chunk.js","mappings":"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","sources":["FormValidation/Validators.js","webpack://01-first-project/./src/components/dialogs/Dialogs.module.scss?caf7","components/dialogs/dialogItem/DialogsItem.js","components/dialogs/message/Message.js","components/dialogs/addMessageForm/AddMessageForm.js","components/dialogs/Dialogs.js","components/dialogs/DialogsContainer.js","hoc/withAuthRedirect.js","webpack://01-first-project/./src/FormValidation/Validators.module.scss?bff7"],"sourcesContent":["import * as Yup from 'yup'\n\nconst EMAIL_VALIDATION = Yup.string()\n  //проверка email на текст@текст.текст\n  .email('Invalid email format')\n  //максимальная длина - 30 символов\n  .max(30, 'Nice try, nobody has a first name that long')\n  .required('Required')\n\nconst PASSWORD_VALIDATION = Yup.string()\n  .min(8, 'Must be longer than 8 characters')\n  .required('Required')\n\nconst NEW_POST_TEXT_VALIDATION = Yup.string()\n  //максимальная длина - 1000 символов\n  .max(1000, 'Must be less  than 1000 characters')\n  .required('Required')\n\n  const NEW_MESSAGE_TEXT_VALIDATION = Yup.string()\n     .max(500, 'Must be less  than 500 characters')\n     .required('Required')\n\nexport const LoginSchema = Yup.object().shape({\n  email: EMAIL_VALIDATION,\n  password: PASSWORD_VALIDATION,\n})\n\nexport const PostSchema = Yup.object().shape({\n  newPostText: NEW_POST_TEXT_VALIDATION\n})\n\nexport const MessageSchema = Yup.object().shape({\n  newMessageText: NEW_MESSAGE_TEXT_VALIDATION,\n})","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__moGST\",\"persons\":\"Dialogs_persons__+IZyF\",\"active\":\"Dialogs_active__SSv29\",\"persons__profile\":\"Dialogs_persons__profile__J7ji5\",\"persons__photo\":\"Dialogs_persons__photo__E7o-s\",\"chats\":\"Dialogs_chats__fGvA8\",\"chats__message\":\"Dialogs_chats__message__uf82v\",\"dialogsForm\":\"Dialogs_dialogsForm__sb4hZ\"};","import s from './../Dialogs.module.scss'\nimport { NavLink } from 'react-router-dom'\n\nconst DialogItem = (props) => (\n  <div className={s.persons__profile}>\n    <div className={s.persons__photo}>\n      <img\n        src=\"https://www.seekpng.com/png/detail/966-9665317_placeholder-image-person-jpg.png\"\n        alt=\"\"\n      />\n    </div>\n    <div className={s.persons__name + ' ' + s.active}>\n      <NavLink to={'dialogs/' + props.id}>{props.name}</NavLink>\n    </div>\n  </div>\n)\n\nexport default DialogItem\n\n","import React from 'react'\nimport s from './../Dialogs.module.scss'\n\nconst Message = (props) => {\n  return <div className={s.dialog}>{props.message}</div>\n}\n\nexport default Message\n","import { useFormik } from 'formik'\nimport { MessageSchema } from '../../../FormValidation/Validators'\nimport styles from '../../../FormValidation/Validators.module.scss'\nimport stylesButton from '../../button/Button.module.scss'\n\nconst AddMessageForm = (props) => {\n  const formik = useFormik({\n    initialValues: {\n      newMessageText: '',\n    },\n    onSubmit: props.onSubmit,\n    validationSchema: MessageSchema,\n  })\n  const hasError = formik.errors.newMessageText\n  return (\n    //вызов onSubmit, срабатывает после нажатия на кнопку\n    <form onSubmit={formik.handleSubmit}>\n      <div>\n        <label htmlFor=\"newMessageText\">Enter your message</label>\n      </div>\n      <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n        <textarea\n          id=\"newMessageText\"\n          type=\"textarea\"\n          //срабатывает при вводе значений в форму и сохраняет в формик, пока не будет нажата кнопка submit\n          onChange={formik.handleChange}\n          value={formik.values.newMessageText}\n        />\n        <div>{hasError && <span>{hasError}</span>}</div>\n      </div>\n      <div>\n      <button type=\"submit\" className={stylesButton.button}  id=\"submit\"></button>\n      <label htmlFor=\"submit\">Submit</label>\n      </div>\n    </form>\n  )\n}\n\nexport default AddMessageForm\n","import React from 'react'\nimport s from './Dialogs.module.scss'\nimport DialogItem from './dialogItem/DialogsItem'\nimport Message from './message/Message'\nimport AddMessageForm from './addMessageForm/AddMessageForm'\n\nconst Dialogs = (props) => {\n let state = props.dialogsPage\n  //перебирам массив с именами и сообщениями, и создаем новый в виде jsx\n  //'DialogItem' и 'Message' это компоненты выше,в которые мы передаем пропcы (name, message, id) из массивов dialogs и messages\n  let dialogsElements = state.dialogs.map((d, index) => (\n    <DialogItem key={`dialogsElements_${index}`} name={d.name} id={d.id} />\n  ))\n  let messagesElement = state.messages.map((m, index) => (\n    <Message key={`messagesElement_${index}`} message={m.message} id={m.id} />\n  ))\n  \n  //Кликнули по кнопке, значит надо отправить сообщение\n  let addNewMessage = (values) => {\n    props.sendMessage(values.newMessageText)\n  }\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.persons}>{dialogsElements}</div>\n      <div className={s.chats}>\n        <div>{messagesElement}</div>\n        <div className={s.dialogsForm}>\n          <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Dialogs\n","import { connect } from 'react-redux'\nimport {addMessageActionCreator} from '../../redux/dialogs-reducer'\nimport Dialogs from './Dialogs'\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\nimport { compose } from 'redux'\n\n\n//ф-я мапит стейт на пропсы (превращает часть стейта в пропсы)\n//настраивает свойства,которые мы берем из стейта\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage\n  }\n}\n\n//настраивает колбэки, которые мы будем отправлять в презент.компонент\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    //достаем из textarea введенное в него значение\n    sendMessage: (newMessageText) => {\n      dispatch(addMessageActionCreator(newMessageText))\n    }\n  }\n}\n\n//compose ф-я, которая позволяет получить результат одной функци, а потом обработать его при помощи другой функции\n//первые скобки это вызов ф-и, вторые скобки это ф-я которую вернул первый вызов compose\nexport default compose(\n  //connect настраивает контейнерный компонент\n  connect(mapStateToProps, mapDispatchToProps),\n  //вызываем HOC и кладем ему в параметр Dialogs\n  withAuthRedirect\n)(Dialogs)\n","import React from \"react\";\nimport { connect } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\n\n  let mapStateToPropsForRedirect = (state) => ({\n    //теперь в диалоги придет флаг, зарегистрированы мы или нет\n    isAuth: state.auth.isAuth\n  })\n//в ф-ю withAuthRedirect будут приходить разные целевые компоненты (напр. Dialogs, Profile)\n//и будет создаваться RedirectComponent для каждого целевого компонента, с логикой, которая будет использоваться для каждого целевого комп.\nexport const withAuthRedirect = (Component) =>{\n  class RedirectComponent extends React.Component {\n    render() {\n      //если пользователь не залогинен, то перебросить его на страницу регистрации\n      if (!this.props.isAuth) return <Navigate to=\"/login\" />\n      //все пропсы, которые попали в контейн.компонент с помощью деструктуризации прокидываются в целевой компонент\n      return <Component {...this.props} />\n    }\n  }\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n  return ConnectedAuthRedirectComponent\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"Validators_formControl__jAQ27\",\"error\":\"Validators_error__Xq-TW\",\"formSummaryError\":\"Validators_formSummaryError__sZQDQ\"};"],"names":["EMAIL_VALIDATION","Yup","email","max","required","PASSWORD_VALIDATION","min","NEW_POST_TEXT_VALIDATION","NEW_MESSAGE_TEXT_VALIDATION","LoginSchema","shape","password","PostSchema","newPostText","MessageSchema","newMessageText","props","className","s","src","alt","to","id","name","message","formik","useFormik","initialValues","onSubmit","validationSchema","hasError","errors","handleSubmit","htmlFor","styles","type","onChange","handleChange","value","values","stylesButton","state","dialogsPage","dialogsElements","dialogs","map","d","index","messagesElement","messages","m","sendMessage","compose","connect","dispatch","addMessageActionCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","React"],"sourceRoot":""}