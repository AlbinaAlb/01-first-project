{"version":3,"file":"static/js/952.5103c59c.chunk.js","mappings":"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","sources":["FormValidation/Validators.js","webpack://01-first-project/./src/components/profile/myPosts/MyPosts.module.scss?5585","webpack://01-first-project/./src/components/profile/myPosts/post/Post.module.scss?1e1a","components/profile/myPosts/post/Post.js","components/profile/AddNewPostForm/AddNewPostForm.js","components/profile/myPosts/MyPosts.js","components/profile/myPosts/MyPostsСontainer.js","webpack://01-first-project/./src/components/profile/profileInfo/ProfileInfo.module.scss?38a0","components/profile/profileInfo/ProfileStatusWithHooks.js","components/profile/profileInfo/ProfileInfo.js","components/profile/Profile.js","components/profile/ProfileContainer.js","hoc/withAuthRedirect.js","webpack://01-first-project/./src/FormValidation/Validators.module.scss?bff7"],"sourcesContent":["import * as Yup from 'yup'\n\nconst EMAIL_VALIDATION = Yup.string()\n  //проверка email на текст@текст.текст\n  .email('Invalid email format')\n  //максимальная длина - 30 символов\n  .max(30, 'Nice try, nobody has a first name that long')\n  .required('Required')\n\nconst PASSWORD_VALIDATION = Yup.string()\n  .min(8, 'Must be longer than 8 characters')\n  .required('Required')\n\nconst NEW_POST_TEXT_VALIDATION = Yup.string()\n  //максимальная длина - 1000 символов\n  .max(1000, 'Must be less  than 1000 characters')\n  .required('Required')\n\n  const NEW_MESSAGE_TEXT_VALIDATION = Yup.string()\n     .max(500, 'Must be less  than 500 characters')\n     .required('Required')\n\nexport const LoginSchema = Yup.object().shape({\n  email: EMAIL_VALIDATION,\n  password: PASSWORD_VALIDATION,\n})\n\nexport const PostSchema = Yup.object().shape({\n  newPostText: NEW_POST_TEXT_VALIDATION\n})\n\nexport const MessageSchema = Yup.object().shape({\n  newMessageText: NEW_MESSAGE_TEXT_VALIDATION,\n})","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__kEF9P\",\"postsBlock__posts\":\"MyPosts_postsBlock__posts__Ejdve\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__-BUTX\"};","import s from './Post.module.scss'\n\nconst Post = (props) => {\n  return (\n    <div className={s.post}>\n      <img\n        src=\"https://i.pinimg.com/originals/f1/9c/f5/f19cf5aaa0ea38889c940c12d8ab41b9.jpg\"\n        alt=\"\"\n      />\n      {props.message}\n      <div>\n        <span>{props.likesCount}</span>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import { useFormik } from 'formik'\nimport {PostSchema} from '../../../FormValidation/Validators'\nimport styles from '../../../FormValidation/Validators.module.scss'\nimport stylesButton from '../../button/Button.module.scss'\n\nconst AddNewPostForm = (props) => {\n  const formik = useFormik({\n    initialValues: {\n      newPostText: '',\n    },\n    onSubmit: props.onSubmit,\n    validationSchema: PostSchema,\n  })\n  //достаем из формика ошибку\n  const hasError = formik.errors.newPostText\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      {/* если есть ошибка hasError, то использовать класс styles.error, иначе ничего */}\n      <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n        <textarea\n          id=\"newPostText\"\n          name=\"newPostText\"\n          type=\"textarea\"\n          onChange={formik.handleChange}\n          value={formik.values.newPostText}\n        />\n        <div>{hasError && <span>{hasError}</span>}</div>\n      </div>\n      <div>\n        <button type=\"submit\" id='submit' className={stylesButton.button}>Add post</button>\n        <label htmlFor=\"submit\">Add post</label>\n      </div>\n    </form>\n  )\n}\nexport default AddNewPostForm\n","import React from 'react'\nimport s from './MyPosts.module.scss'\nimport Post from './post/Post'\nimport AddNewPostForm from '../AddNewPostForm/AddNewPostForm'\n\n//тупой компонент,запускает ф-ю которая в него пришла addPost и в эту функцию передает text\nconst MyPosts = React.memo((props) => {\n  //перебирам массив с постами, и создаем новый в виде jsx\n  //'Post' это компонент,в который мы передаем пропcы (message, likesCount) из массива posts\n  let postsElement = props.posts.map((p, index) => (\n    <Post\n      key={`postsElement_${index}`}\n      message={p.message}\n      likesCount={p.likesCount}\n    />\n  )).reverse()\n\n  //при клике на кнопку вызываетcя колбэк, который берется из MyPostsContainer и оттуда добавляет пост\n  let onAddPost = (values) => {\n    props.addPost(values.newPostText)\n  }\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      {/* rкогда в форме будет сабмит, т.е. когда форма соберет данные, то вызвать колбэк  */}\n      <AddNewPostForm onSubmit={onAddPost} />\n\n      <div className={s.postsBlock__posts}>{postsElement}</div>\n    </div>\n  )\n})\n\nexport default MyPosts\n","import { connect } from 'react-redux'\nimport {addPostActionCreator} from '../../../redux/profile-reducer'\nimport MyPosts from './MyPosts'\n\n//ф-я мапит стейт на пропсы (превращает часть стейта в пропсы)\n//настраивает свойства,которые мы берем из стейта\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n  }\n}\n\n//настраивает колбэки, которые мы будем отправлять в презент.компонент\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    //ф-я добавляет пост\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText))\n    },\n  }\n}\n\n//connect настраивает контейнерный компонент, который служит оберткой для презентационного-чистого компонента MyPosts\n//MyPosts законектили к стору\n//сюда придут посты\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer\n","// extracted by mini-css-extract-plugin\nexport default {\"profileImg\":\"ProfileInfo_profileImg__JHcdW\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__UM-7L\",\"mainPhoto\":\"ProfileInfo_mainPhoto__KZM2F\"};","import React, { useState, useEffect } from 'react'\n\nconst ProfileStatusWithHooks = (props) => {\n  //типа локальный стейт\n  //useState возвращает массив\n  //В первом элементе массива первое значение стейта, вторым элементом является ф-я которая будет изменять первый элемент.\n  //Деструктурирующее присваивание : editMode = 0 элемент массива (false); setEditMode = 1 элемент (ф-я)\n  let [editMode, setEditMode] = useState(false)\n  //второй типа локальный стейт\n  let [status, setStatus] = useState(props.status)\n\n  // [] чтобы useEffect запускался не всегда, а только один раз в момент когда компонент самый первый раз вмонтировался \n  //или при изменении зависимости в нем\n  useEffect(() => {\n    setStatus(props.status)\n  }, \n  //если статус при отрисовке будет другим, то эффект перезапустится\n  [props.status])\n\n  //при клике на span вызывается activateEditMode, которая меняет стейт на true, тогда вместо спана пояаится инпут\n  const activateEditMode = () => {\n    setEditMode(true)\n  }\n  //при потере фокуса инпутом, изменить стейт на false, тогда вместо инпута появится спан\n   const deactivateEditMode = () => {\n     setEditMode(false)\n     props.updateStatus(status)\n   }\n\nconst onStatusChange = (e) => {\n  //узнаем новое значение (e.currentTarget.value) и меняем статус в локальном стейте\n    setStatus(e.currentTarget.value)\n}\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <span onDoubleClick={activateEditMode}>{props.status || '---'}</span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input\n            onChange={onStatusChange}\n            onBlur={deactivateEditMode}\n            autoFocus={true}\n            value={status}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default ProfileStatusWithHooks\n","import s from './ProfileInfo.module.scss'\nimport stylesButton from '../../button/Button.module.scss'\nimport Preloader from '../../common/preloader/Preloader'\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\nimport userPhoto from '../../../assets/images/cat.jpeg'\n\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto }) => {\n  //если профайла нет\n  if (!profile) {\n    return <Preloader />\n  }\n\n  const onMainPhotoSelected = (e) => {\n    //если файл выбран\n    if (e.target.files.length) {\n      //в колбэк savePhoto вложить выбранный файл (он будет под индексом 0)\n      savePhoto(e.target.files[0])\n    }\n  }\n\n  return (\n    <div>\n      <div className={s.profileImg}>\n        <img\n          src=\"https://cs8.pikabu.ru/post_img/big/2016/03/29/6/1459241134114051877.jpg\"\n          alt=\"\"\n        />\n      </div>\n      <div className={s.descriptionBlock}>\n        {/* если наш профиль, то показать наше фото профиля, иначе фото которое загрузил другой пользователь */}\n        {isOwner ? (\n          <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\" />\n        ) : (\n          <img src={profile.photos.large} className={s.mainPhoto} alt=\"\" />\n        )}\n        {/* если isOwner(мы на своей странице) тогда показать инпут с выбором файла */}\n        {isOwner && \n        <div>\n        <input type={'file'} onChange={onMainPhotoSelected} id=\"file\" className={stylesButton.button} />\n        <label htmlFor=\"file\">Choose a photo</label>\n        </div>}\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      </div>\n    </div>\n  )\n}\n\nexport default ProfileInfo\n","import React from 'react'\nimport MyPostsContainer from './myPosts/MyPostsСontainer'\n//import s from './Profile.module.scss'\nimport ProfileInfo from './profileInfo/ProfileInfo'\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <ProfileInfo\n        isOwner={props.isOwner}\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n        savePhoto={props.savePhoto}\n      />\n      <MyPostsContainer />\n    </div>\n  )\n}\n\nexport default Profile\n","import React, { useEffect } from 'react'\nimport Profile from './Profile'\nimport { connect } from 'react-redux'\nimport { getUserProfile, getStatus, updateStatus, savePhoto } from '../../redux/profile-reducer'\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\nimport { useParams } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { compose } from 'redux'\nimport { useState } from 'react'\n\nfunction ProfileContainer(props) {\n  // когда будем писать на хуках, будет юзаться для того чтоб диспатчить экшины и thunk в стор из функциональных компонетов\n  const dispatch = useDispatch()\n  //в App cоздали Route \"/profile/:userId\", и данный хук вытаскивает параметр - то что после :\n  const params = useParams()\n  const [isMe, setIsMe] = useState(false)\n\n  //хук принимает колбэк и массив 'зависимостей', при изменении этих зависимостей будет вызываться колбэк (чтобы ф-я вызвалась один раз при загрузке страницы)\n  useEffect(() => {\n    //если мы не на чужом айди профиля или на айди своего, то переключить на тру\n      if (!params.userId || (params.userId === props.autorizedUserId)) {\n        setIsMe(true)\n      }\n    dispatch(getUserProfile(params.userId || props.autorizedUserId))\n    dispatch(getStatus(params.userId || props.autorizedUserId))\n  }, [])\n  //раскрыть то что в пропсах и вставить как атрибуты в профайл */\n  //и добавить кроме тех пропсов что пришли в Profile из вне - profile из mapStateToProps\n  //компонент Profile получает в пропсах profile\n  return (\n    <Profile\n      {...props}\n      isOwner={isMe}\n      profile={props.profile}\n      status={props.status}\n      updateStatus={props.updateStatus}\n      savePhoto={props.savePhoto}\n    />\n  )\n}\n\n//когда ф-я возвращает объект нужно ставить круглые скобки.\nlet mapStateToProps = (state) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  autorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth,\n})\n\n//compose ф-я, которая позволяет получить результат одной функци, а потом обработать его при помощи другой функции\nexport default compose(\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto }),\n  //вызываем HOC и кладем ему в параметр Profile\n  withAuthRedirect\n)(ProfileContainer)\n","import React from \"react\";\nimport { connect } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\n\n  let mapStateToPropsForRedirect = (state) => ({\n    //теперь в диалоги придет флаг, зарегистрированы мы или нет\n    isAuth: state.auth.isAuth\n  })\n//в ф-ю withAuthRedirect будут приходить разные целевые компоненты (напр. Dialogs, Profile)\n//и будет создаваться RedirectComponent для каждого целевого компонента, с логикой, которая будет использоваться для каждого целевого комп.\nexport const withAuthRedirect = (Component) =>{\n  class RedirectComponent extends React.Component {\n    render() {\n      //если пользователь не залогинен, то перебросить его на страницу регистрации\n      if (!this.props.isAuth) return <Navigate to=\"/login\" />\n      //все пропсы, которые попали в контейн.компонент с помощью деструктуризации прокидываются в целевой компонент\n      return <Component {...this.props} />\n    }\n  }\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n  return ConnectedAuthRedirectComponent\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"Validators_formControl__jAQ27\",\"error\":\"Validators_error__Xq-TW\",\"formSummaryError\":\"Validators_formSummaryError__sZQDQ\"};"],"names":["EMAIL_VALIDATION","Yup","email","max","required","PASSWORD_VALIDATION","min","NEW_POST_TEXT_VALIDATION","NEW_MESSAGE_TEXT_VALIDATION","LoginSchema","shape","password","PostSchema","newPostText","MessageSchema","newMessageText","props","className","s","src","alt","message","likesCount","formik","useFormik","initialValues","onSubmit","validationSchema","hasError","errors","handleSubmit","styles","id","name","type","onChange","handleChange","value","values","stylesButton","htmlFor","React","postsElement","posts","map","p","index","reverse","addPost","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","e","currentTarget","onBlur","updateStatus","autoFocus","profile","isOwner","savePhoto","Preloader","photos","large","userPhoto","target","files","length","compose","autorizedUserId","auth","userId","isAuth","getUserProfile","getStatus","withAuthRedirect","useDispatch","params","useParams","isMe","setIsMe","mapStateToPropsForRedirect","Component","RedirectComponent","this","to"],"sourceRoot":""}