{"version":3,"file":"static/js/51.c5e5a872.chunk.js","mappings":"wNAEMA,EAAmBC,EAAAA,KAEtBC,MAAM,wBAENC,IAAI,GAAI,+CACRC,SAAS,YAENC,EAAsBJ,EAAAA,KACzBK,IAAI,EAAG,oCACPF,SAAS,YAENG,EAA2BN,EAAAA,KAE9BE,IAAI,IAAM,sCACVC,SAAS,YAEJI,EAA8BP,EAAAA,KAChCE,IAAI,IAAK,qCACTC,SAAS,YAEFK,EAAcR,EAAAA,KAAaS,MAAM,CAC5CR,MAAOF,EACPW,SAAUN,IAGCO,EAAaX,EAAAA,KAAaS,MAAM,CAC3CG,YAAaN,IAGFO,EAAgBb,EAAAA,KAAaS,MAAM,CAC9CK,eAAgBP,K,wHCmDlB,UA1Ec,WACZ,IAeIQ,EAfEC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GAErBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbtB,MAAO,4BACPS,SAAU,cACVc,YAAY,GAEdC,SAAU,SAACC,EAAD,OAAYC,EAAZ,EAAYA,UAAZ,OACRX,GAASY,EAAAA,EAAAA,IAAMF,EAASzB,MAAOyB,EAAShB,SAAUgB,EAASF,WAAYG,KAEzEE,iBAAkBrB,EAAAA,KAUpB,OANIa,EAAOS,SACTf,EAAYM,EAAOS,OAAOC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAClC,0BAAmBD,GAARC,OAIXhB,GACK,SAAC,KAAD,CAAUiB,GAAI,cAIrB,4BACE,mCACA,kBAAMV,SAAUJ,EAAOe,aAAvB,WACE,iBAAKC,UAAWC,EAAAA,EAAAA,YAAqB,KAAOjB,EAAOkB,OAAOtC,MAAQqC,EAAAA,EAAAA,MAAe,IAAjF,WACE,kBACEE,GAAG,QACHC,KAAK,QACLC,KAAK,OACLC,SAAUtB,EAAOuB,aACjBC,MAAOxB,EAAOyB,OAAO7C,MACrB8C,YAAa,YAEf,yBAAM1B,EAAOkB,OAAOtC,QAAS,0BAAOoB,EAAOkB,OAAOtC,cAEpD,iBAAKoC,UAAYC,EAAAA,EAAAA,YAAuB,KAAQjB,EAAOkB,OAAO7B,SAAW4B,EAAAA,EAAAA,MAAe,IAAxF,WACE,kBACEE,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,SAAUtB,EAAOuB,aACjBC,MAAOxB,EAAOyB,OAAOpC,SACrBqC,YAAa,cAEf,yBACG1B,EAAOkB,OAAO7B,WAAY,0BAAOW,EAAOkB,OAAO7B,iBAGpD,4BACE,kBACE8B,GAAG,aACHC,KAAK,aACLC,KAAK,WACLC,SAAUtB,EAAOuB,gBAEnB,kBAAOI,QAAS,aAAhB,6BAEH,+BAAOjC,GAAY,gBAAKsB,UAAWC,EAAAA,EAAAA,iBAAhB,SAA0CvB,IAAmB,SAC/E,4BACE,mBAAQ2B,KAAK,SAASF,GAAG,QAAQH,UAAWY,EAAAA,EAAAA,UAC5C,kBAAOD,QAAQ,QAAf,8B,mBC3EV,KAAgB,YAAc,gCAAgC,MAAQ,0BAA0B,iBAAmB","sources":["FormValidation/Validators.js","components/login/Login.js","webpack://01-first-project/./src/FormValidation/Validators.module.scss?bff7"],"sourcesContent":["import * as Yup from 'yup'\n\nconst EMAIL_VALIDATION = Yup.string()\n  //проверка email на текст@текст.текст\n  .email('Invalid email format')\n  //максимальная длина - 30 символов\n  .max(30, 'Nice try, nobody has a first name that long')\n  .required('Required')\n\nconst PASSWORD_VALIDATION = Yup.string()\n  .min(8, 'Must be longer than 8 characters')\n  .required('Required')\n\nconst NEW_POST_TEXT_VALIDATION = Yup.string()\n  //максимальная длина - 1000 символов\n  .max(1000, 'Must be less  than 1000 characters')\n  .required('Required')\n\n  const NEW_MESSAGE_TEXT_VALIDATION = Yup.string()\n     .max(500, 'Must be less  than 500 characters')\n     .required('Required')\n\nexport const LoginSchema = Yup.object().shape({\n  email: EMAIL_VALIDATION,\n  password: PASSWORD_VALIDATION,\n})\n\nexport const PostSchema = Yup.object().shape({\n  newPostText: NEW_POST_TEXT_VALIDATION\n})\n\nexport const MessageSchema = Yup.object().shape({\n  newMessageText: NEW_MESSAGE_TEXT_VALIDATION,\n})","import {LoginSchema} from '../../FormValidation/Validators'\nimport styles from '../../FormValidation/Validators.module.scss'\nimport { useFormik } from 'formik'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login } from '../../redux/auth-reducer'\nimport * as selectors from '../../redux/selectors'\nimport { Navigate } from 'react-router-dom'\nimport stylesButton from '../button/Button.module.scss'\n\nconst Login = () => {\n  const dispatch = useDispatch()\n  const isAuth = useSelector(selectors.isAuthenticated)\n\n  const formik = useFormik({\n    initialValues: {\n      email: 'albinakovalevaa@gmail.com',\n      password: '46265642aA*',\n      rememberMe: false,\n    },\n    onSubmit: (formData, {setStatus}) =>\n      dispatch(login(formData.email, formData.password, formData.rememberMe, setStatus)\n      ),\n    validationSchema: LoginSchema,\n  })\n\n  let apiErrors \n  if (formik.status) {\n    apiErrors = formik.status.error.map((item, index) => (\n      <span key={index}>{item}</span>\n    ))\n  }\n//если пользователь авторизован, то вместо страницы логин показывать страницу профиля\n  if (isAuth) {\n    return <Navigate to={'/profile'} />\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <form onSubmit={formik.handleSubmit}>\n        <div className={styles.formControl + ' ' + (formik.errors.email ? styles.error : '')}>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            value={formik.values.email}\n            placeholder={'e-mail'}\n          />\n          <div>{formik.errors.email && <span>{formik.errors.email}</span>}</div>\n        </div>\n        <div className={ styles.formControl +   ' ' +  (formik.errors.password ? styles.error : '')}>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            onChange={formik.handleChange}\n            value={formik.values.password}\n            placeholder={'password'}\n          />\n          <div>\n            {formik.errors.password && <span>{formik.errors.password}</span>}\n          </div>\n        </div>\n        <div>\n          <input\n            id=\"rememberMe\"\n            name=\"rememberMe\"\n            type=\"checkbox\"\n            onChange={formik.handleChange}\n          />\n          <label htmlFor={'rememberMe'}>remember me</label>\n        </div>\n       <div> {apiErrors ? <div className={styles.formSummaryError}>{apiErrors}</div> : null}</div>\n        <div>\n          <button type=\"submit\" id='login' className={stylesButton.button}></button>\n          <label htmlFor=\"login\">Login</label>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default Login","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"Validators_formControl__jAQ27\",\"error\":\"Validators_error__Xq-TW\",\"formSummaryError\":\"Validators_formSummaryError__sZQDQ\"};"],"names":["EMAIL_VALIDATION","Yup","email","max","required","PASSWORD_VALIDATION","min","NEW_POST_TEXT_VALIDATION","NEW_MESSAGE_TEXT_VALIDATION","LoginSchema","shape","password","PostSchema","newPostText","MessageSchema","newMessageText","apiErrors","dispatch","useDispatch","isAuth","useSelector","selectors","formik","useFormik","initialValues","rememberMe","onSubmit","formData","setStatus","login","validationSchema","status","error","map","item","index","to","handleSubmit","className","styles","errors","id","name","type","onChange","handleChange","value","values","placeholder","htmlFor","stylesButton"],"sourceRoot":""}